/* DO NOT EDIT, automatically generated by update_ev_wrap */
#ifndef EV_WRAP_H
#define EV_WRAP_H
/* 获取事件循环锁时的回调 */
#define acquire_cb ((loop)->acquire_cb) // 函数指针
/* 活跃事件总数("refcount") */
#define activecnt ((loop)->activecnt) // int
/* 活动文件描述符数组的最大容量 */
#define anfdmax ((loop)->anfdmax) // int
/* 活动文件描述符数组 */
#define anfds ((loop)->anfds) //
/* 待处理异步事件标志(原子操作) */
#define async_pending ((loop)->async_pending)
/* 当前异步观察者计数 */
#define asynccnt ((loop)->asynccnt)
/* 异步观察者最大数量 */
#define asyncmax ((loop)->asyncmax)
/* 异步观察者数组 */
#define asyncs ((loop)->asyncs)
/* 当前使用的后端I/O多路复用机制 */
#define backend ((loop)->backend)
/* 后端I/O多路复用机制使用的文件描述符 */
#define backend_fd ((loop)->backend_fd)
/* 后端定时器的最小分辨率(假设值) */
#define backend_mintime ((loop)->backend_mintime)
/* 修改后端文件描述符状态的函数指针 */
#define backend_modify ((loop)->backend_modify)
/* 轮询后端事件的函数指针 */
#define backend_poll ((loop)->backend_poll)
/* 当前检查观察者计数 */
#define checkcnt ((loop)->checkcnt)
/* 检查观察者最大数量 */
#define checkmax ((loop)->checkmax)
/* 检查观察者数组 */
#define checks ((loop)->checks)
/* 当前清理观察者计数 */
#define cleanupcnt ((loop)->cleanupcnt)
/* 清理观察者最大数量 */
#define cleanupmax ((loop)->cleanupmax)
/* 清理观察者数组 */
#define cleanups ((loop)->cleanups)
/* 当前进程ID */
#define curpid ((loop)->curpid)
/* epoll权限错误计数 */
#define epoll_epermcnt ((loop)->epoll_epermcnt)
/* epoll权限错误数组最大容量 */
#define epoll_epermmax ((loop)->epoll_epermmax)
/* epoll权限错误文件描述符数组 */
#define epoll_eperms ((loop)->epoll_eperms)
/* epoll事件数组的最大容量 */
#define epoll_eventmax ((loop)->epoll_eventmax)
/* epoll后端的事件数组 */
#define epoll_events ((loop)->epoll_events)
/* 用于线程间通信的管道 */
#define evpipe ((loop)->evpipe)
/* 当前文件描述符变更计数 */
#define fdchangecnt ((loop)->fdchangecnt)
/* 文件描述符变更数组最大容量 */
#define fdchangemax ((loop)->fdchangemax)
/* 文件描述符变更数组 */
#define fdchanges ((loop)->fdchanges)
/* 当前fork观察者计数 */
#define forkcnt ((loop)->forkcnt)
/* fork观察者最大数量 */
#define forkmax ((loop)->forkmax)
/* fork观察者数组 */
#define forks ((loop)->forks)
/* 是否运行在Linux 2.6.25或更新版本 */
#define fs_2625 ((loop)->fs_2625)
/* inotify文件描述符 */
#define fs_fd ((loop)->fs_fd)
/* inotify文件系统监视哈希表 */
#define fs_hash ((loop)->fs_hash)
// #define ev_rt_now ((loop)->ev_rt_now)
/* inotify I/O观察者 */
#define fs_w ((loop)->fs_w)
/* 空闲观察者总数 */
#define idleall ((loop)->idleall)
/* 每个优先级的当前空闲观察者计数 */
#define idlecnt ((loop)->idlecnt)
/* 每个优先级的空闲观察者最大数量 */
#define idlemax ((loop)->idlemax)
/* 按优先级分类的空闲观察者数组 */
#define idles ((loop)->idles)
/* 调用事件循环时的回调 */
#define invoke_cb ((loop)->invoke_cb)
/* I/O操作最大阻塞时间 */
#define io_blocktime ((loop)->io_blocktime)
/* Windows IOCP后端的完成端口句柄 */
#define iocp ((loop)->iocp)
/* kqueue当前变更计数 */
#define kqueue_changecnt ((loop)->kqueue_changecnt)
/* kqueue变更数组最大容量 */
#define kqueue_changemax ((loop)->kqueue_changemax)
/* kqueue变更事件数组 */
#define kqueue_changes ((loop)->kqueue_changes)
/* kqueue事件数组最大容量 */
#define kqueue_eventmax ((loop)->kqueue_eventmax)
/* kqueue返回事件数组 */
#define kqueue_events ((loop)->kqueue_events)
/* kqueue文件描述符所属进程ID */
#define kqueue_fd_pid ((loop)->kqueue_fd_pid)
/* 事件循环迭代/阻塞总次数 */
#define loop_count ((loop)->loop_count)
/* ev_run进入次数 - ev_run离开次数 */
#define loop_depth ((loop)->loop_depth)
/* 循环结束标志，由ev_break设置 */
#define loop_done ((loop)->loop_done)
/* 单调时钟当前时间 */
#define mn_now ((loop)->mn_now)
/* 上次刷新实时时间的时间点 */
#define now_floor ((loop)->now_floor)
/* 事件循环的原始标志位 */
#define origflags ((loop)->origflags)
/* 待处理观察者占位符，用于触发待处理事件 */
#define pending_w ((loop)->pending_w)
/* 每个优先级的当前待处理事件计数 */
#define pendingcnt ((loop)->pendingcnt)
/* 每个优先级的待处理事件最大数量 */
#define pendingmax ((loop)->pendingmax)
/* 当前待处理的最高优先级 */
#define pendingpri ((loop)->pendingpri)
/* 按优先级分类的待处理事件数组 */
#define pendings ((loop)->pendings)
/* 当前周期性定时器计数 */
#define periodiccnt ((loop)->periodiccnt)
/* 周期性定时器堆最大容量 */
#define periodicmax ((loop)->periodicmax)
/* 周期性定时器堆数组 */
#define periodics ((loop)->periodics)
/* 管道读端的I/O观察者 */
#define pipe_w ((loop)->pipe_w)
/* 跳过管道写入的次数(原子操作) */
#define pipe_write_skipped ((loop)->pipe_write_skipped)
/* 需要写入管道的标志(原子操作) */
#define pipe_write_wanted ((loop)->pipe_write_wanted)
/* poll数组的当前使用数量 */
#define pollcnt ((loop)->pollcnt)
/* poll索引映射的最大容量 */
#define pollidxmax ((loop)->pollidxmax)
/* 文件描述符到poll数组索引的映射 */
#define pollidxs ((loop)->pollidxs)
/* poll数组的最大容量 */
#define pollmax ((loop)->pollmax)
/* poll后端的文件描述符数组 */
#define polls ((loop)->polls)
/* 端口事件数组最大容量 */
#define port_eventmax ((loop)->port_eventmax)
/* Solaris端口后端的事件数组 */
#define port_events ((loop)->port_events)
/* fork后需要重建内核状态的标志 */
#define postfork ((loop)->postfork)
/* 当前准备观察者计数 */
#define preparecnt ((loop)->preparecnt)
/* 准备观察者最大数量 */
#define preparemax ((loop)->preparemax)
/* 准备观察者数组 */
#define prepares ((loop)->prepares)
/* 释放事件循环锁时的回调 */
#define release_cb ((loop)->release_cb)
/* 当前反向馈送事件计数 */
#define rfeedcnt ((loop)->rfeedcnt)
/* 反向馈送事件最大数量 */
#define rfeedmax ((loop)->rfeedmax)
/* 反向馈送事件链表 */
#define rfeeds ((loop)->rfeeds)
/* 实时时间与单调时间的差值 */
#define rtmn_diff ((loop)->rtmn_diff)
/* 待处理信号标志(原子操作) */
#define sig_pending ((loop)->sig_pending)
/* signalfd文件描述符 */
#define sigfd ((loop)->sigfd)
/* signalfd信号集 */
#define sigfd_set ((loop)->sigfd_set)
/* signalfd I/O观察者 */
#define sigfd_w ((loop)->sigfd_w)
/* 超时事件最大阻塞时间 */
#define timeout_blocktime ((loop)->timeout_blocktime)
/* 当前定时器计数 */
#define timercnt ((loop)->timercnt)
/* 定时器堆最大容量 */
#define timermax ((loop)->timermax)
/* 定时器堆数组 */
#define timers ((loop)->timers)
/* 用户自定义数据指针 */
#define userdata ((loop)->userdata)
/* select后端的异常文件描述符集(Windows特有) */
#define vec_eo ((loop)->vec_eo)
/* select后端文件描述符集的最大大小 */
#define vec_max ((loop)->vec_max)
/* select后端的读输入文件描述符集 */
#define vec_ri ((loop)->vec_ri)
/* select后端的读输出文件描述符集 */
#define vec_ro ((loop)->vec_ro)
/* select后端的写输入文件描述符集 */
#define vec_wi ((loop)->vec_wi)
/* select后端的写输出文件描述符集 */
#define vec_wo ((loop)->vec_wo)
#else
#undef EV_WRAP_H
#undef acquire_cb
#undef activecnt
#undef anfdmax
#undef anfds
#undef async_pending
#undef asynccnt
#undef asyncmax
#undef asyncs
#undef backend
#undef backend_fd
#undef backend_mintime
#undef backend_modify
#undef backend_poll
#undef checkcnt
#undef checkmax
#undef checks
#undef cleanupcnt
#undef cleanupmax
#undef cleanups
#undef curpid
#undef epoll_epermcnt
#undef epoll_epermmax
#undef epoll_eperms
#undef epoll_eventmax
#undef epoll_events
#undef evpipe
#undef fdchangecnt
#undef fdchangemax
#undef fdchanges
#undef forkcnt
#undef forkmax
#undef forks
#undef fs_2625
#undef fs_fd
#undef fs_hash
#undef fs_w
#undef idleall
#undef idlecnt
#undef idlemax
#undef idles
#undef invoke_cb
#undef io_blocktime
#undef iocp
#undef kqueue_changecnt
#undef kqueue_changemax
#undef kqueue_changes
#undef kqueue_eventmax
#undef kqueue_events
#undef kqueue_fd_pid
#undef loop_count
#undef loop_depth
#undef loop_done
#undef mn_now
#undef now_floor
#undef origflags
#undef pending_w
#undef pendingcnt
#undef pendingmax
#undef pendingpri
#undef pendings
#undef periodiccnt
#undef periodicmax
#undef periodics
#undef pipe_w
#undef pipe_write_skipped
#undef pipe_write_wanted
#undef pollcnt
#undef pollidxmax
#undef pollidxs
#undef pollmax
#undef polls
#undef port_eventmax
#undef port_events
#undef postfork
#undef preparecnt
#undef preparemax
#undef prepares
#undef release_cb
#undef rfeedcnt
#undef rfeedmax
#undef rfeeds
#undef rtmn_diff
#undef sig_pending
#undef sigfd
#undef sigfd_set
#undef sigfd_w
#undef timeout_blocktime
#undef timercnt
#undef timermax
#undef timers
#undef userdata
#undef vec_eo
#undef vec_max
#undef vec_ri
#undef vec_ro
#undef vec_wi
#undef vec_wo
#endif
